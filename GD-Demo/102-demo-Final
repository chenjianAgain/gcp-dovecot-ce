AWSTemplateFormatVersion: 2010-09-09
Description: AWS NLB+TargetGroup+ASG+LaunchConfig+Dovecot+Postfix+EFS PoC Demo
Parameters:
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-afd15ed0" # AMALINUX 2 MAY 2018 
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" # AMALINUX SEP 2016
    ca-central-1:
      "AMALINUX" : "ami-eb20928f" # AMALINUX SEP 2016 v01
    eu-west-1:
      "AMALINUX" : "ami-d41d58a7" # AMALINUX SEP 2016
    eu-central-1:
      "AMALINUX" : "ami-0044b96f" # AMALINUX SEP 2016
    eu-west-2:
      "AMALINUX" : "ami-bfe0eadb" # AMALINUX SEP 2016 v01
    ap-southeast-1:
      "AMALINUX" : "ami-7243e611" # AMALINUX SEP 2016
    ap-southeast-2:
      "AMALINUX" : "ami-55d4e436" # AMALINUX SEP 2016
    ap-northeast-2:
      "AMALINUX" : "ami-a04297ce" # AMALINUX SEP 2016
    ap-northeast-1:
      "AMALINUX" : "ami-1a15c77b" # AMALINUX SEP 2016
    ap-south-1:
      "AMALINUX" : "ami-cacbbea5" # AMALINUX SEP 2016
    sa-east-1:
      "AMALINUX" : "ami-b777e4db" # AMALINUX SEP 2016
  InstanceSize:
    SMALL:
      "EC2" : "t2.micro"
      "DB" : "db.t2.micro"
    MEDIUM:
      "EC2" : "t2.small"
      "DB" : "db.t2.small"
    LARGE:
      "EC2" : "t2.medium"
      "DB" : "db.t2.medium"
Resources:
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags: 
        - 
          Key: "Name"
          Value: "Joseph-Demo-20180620"
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      Tags: 
        - 
          Key: "Name"
          Value: "GD-Demo-1"
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: 
        - 
          Key: "Name"
          Value: "Joseph-Demo-20180620"
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags: 
        - 
          Key: "Name"
          Value: "Joseph-Demo-20180620"
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !GetAtt 
        - VPC
        - DefaultNetworkAcl
  Ec2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 110
      ToPort: 110
      CidrIp: 0.0.0.0/0
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 143
      ToPort: 143
      CidrIp: 0.0.0.0/0
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  EC2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref Ec2Instance
      MinSize: 3
      MaxSize: 3
      DesiredCapacity: 3
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref publicNLBTargetGroup
      Tags:
        - 
          Key: Name
          Value: !Sub
            - "${StackName}-demo"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
   # CreationPolicy:
   #   ResourceSignal:
   #     Timeout: PT15M
   # UpdatePolicy:
   #   AutoScalingRollingUpdate:
   #     MinInstancesInService: '0'
   #     MaxBatchSize: '1'
   #     PauseTime: PT15M
   #     WaitOnResourceSignals: 'true'
  Ec2Instance:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: Joseph-demo
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] #/ Amazon Linux
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      AssociatePublicIpAddress: 'true'
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash
          sudo su -
          yum install -y mailx telnet mutt postfix dovecot
          yum update -y
          setenforce 0
          systemctl stop firewalld
          useradd demo
          echo "demo:demo1" | chpasswd
          usermod -aG mail demo
          sed -i '$adisable_plaintext_auth = no' /etc/dovecot/conf.d/10-auth.conf
          sed -i '$amail_location = mbox:~/mail:INBOX=/var/mail/%u' /etc/dovecot/conf.d/10-mail.conf
          systemctl restart dovecot
          # Let postfix recieve all traffic, not only localhost
          postconf -e "inet_interfaces = all"
          postconf -e "mydestination = josephaws.one, email.josephaws.one, josephaws.com, email.josephaws.com, localhost"
          systemctl restart postfix
          # Prepare some data for imap/pop3 test
          for i in {1..3}
          do
              #echo "Welcome $i times"
              current=`date "+%Y-%m-%d %H:%M:%S"` 
              echo "hello-$i at $current" | mail -s "test$i-$current" demo@localhost.
          done
            
  publicNLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: network
      Name: !Sub 
        - '${StackName}-nlb'
        - StackName: !Ref 'AWS::StackName'
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub 
            - '${StackName}-nlb'
            - StackName: !Ref 'AWS::StackName'
  NLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref publicNLBTargetGroup
      LoadBalancerArn: 
        Ref: publicNLB
      Port: 143
      Protocol: TCP
  publicNLBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
     # HealthCheckPath: /
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
     # Matcher:
     #   HttpCode: 200-399
      Name: !Sub 
        - '${StackName}-tcp-tg'
        - StackName: !Ref 'AWS::StackName'
      Port: 143
      Protocol: TCP
      Tags:
        - Key: Name
          Value: nlb-tg
      VpcId: !Ref VPC
Outputs:
  URL:
    Description: Your NLB DNS URL
    Value: !Sub 
      - 'mutt -f imap://${DNSName}'
      -  DNSName: !GetAtt publicNLB.DNSName
